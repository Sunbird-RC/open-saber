spring:
  profiles.active: dev
---
##################################################################
#                      DEVELOPMENT PROFILE                       #
##################################################################
spring:
  profiles: dev
  output:
    ansi:
      enabled: ALWAYS
name: dev-yam
enviroment: development

server:
  # Change this port number if you want to run it on another.
  port: ${server_port:9180}

cors:
  # By default, allowing all domains to access this service. Choose a particular domain,
  # in production. For example, http://otherservice.com:9090, to allow requests from otherservice.com.
  allowedOrigin: ${cors_allowedOrigin:*}

perf:
  monitoring:
    enabled: ${perf_monitoring_enabled:false}

registry:
  context:
    base: ${registry_context_base:http://localhost:8080/}
  system:
    base: ${registry_system_base:http://localhost:8080/opensaber/}
  rootEntity:
        type: ${registry_rootentity_type:Teacher}

# This property is to be used for search request/query
# offset: search result starts from value provided as default
# limits: search result to value provided as default
search:
  offset: ${search_offset:0}
  limit: ${search_limit:100}
  # The search mechanism to use. Values could be either NativeSearchService or ElasticSearchService
  #   If NativeSearchService, then every search API uses the same database as the writes. May
  # not offer high speed reads. This is the default search service, if this config is not provided.
  #   If ElasticSearchService, then Elastic search is used.
  providerName: io.opensaber.registry.service.NativeSearchService

# This property is to be used for read request
read:
  # The read mechanism to use, values could be either NativeReadService or ElasticReadService
  providerName: io.opensaber.registry.service.NativeReadService

database:
  # This property is internal and not to be confused with the schema definition.
  # Clients use this property to perform read/update operation.
  # NOTE: Once a name is chosen it must not be changed, unless you're ready to let go the
  #       existing data in the database.
  uuidPropertyName: ${database_uuidPropertyName:osid}

  # Providers available are NEO4J, SQLG, CASSANDRA, ORIENTDB, TINKERGRAPH (in-memory).
  # NOTE: Values given against 'shardId' must be unique
  provider: ${database_provider:SQLG}

  # Choose "none" as the propertyName if you don't want any shards. Otherwise
  # implement IShardAdvisor interface in your own ways. An example, SerialNumShardAdvisor
  # has been provided for reference. If you'd like to use it, set value "serialNum" here.
  # Note that "serialNum" must then be part of the payload.
  shardProperty: ${database_shardProperty:none}

  # This property is instruction to use the shard advisor.
  # Values could be io.opensaber.registry.sink.shard.DefaultShardAdvisor, OR
  # io.opensaber.registry.sink.shard.SerialNumberShardAdvisor OR
  # absolute class name of your advisor class.
  # If this property not provided, advisor is set to DefaultShardAdvisor
  shardAdvisorClassName: io.opensaber.registry.sink.shard.DefaultShardAdvisor

  connectionInfo:
    -
      # shardId, shardlabel must be a unique identifier to each connection.
      shardId: shard1

      # shardLabel is used as prefix for a uuid. Could be any alpha numeric string
      # Example of a record identifier: 1-60f76147-0acd-4dff-b75a-2d811787d04d
      # Note '1' is the label used for record identifier
      # shardLabel is not stored in the database
      shardLabel: 1

      # The format of the URI can be learnt from the following links -
      #     * 1. Graph database (Neo4J)
      #     ** https://github.com/SteelBridgeLabs/neo4j-gremlin-bolt
      #     ** Example : bolt://localhost:7687
      #     * 2. Relational databases (Postgresql, HSQLDB, H2, MariaDB, MySQL, MSSQLServer)
      #     ** http://sqlg.org/docs/2.0.0-SNAPSHOT/
      #     ** Example - Postgres - jdbc:postgresql://localhost:5432/yourdb
      #     * 3. NoSQL  databases (Cassandra)
      #     ** Example - cassandra - jdbc:cassandra://localhost:9160/yourdb
      uri: ${connectionInfo_uri:jdbc:postgresql://localhost:5432/NIITRegistryDb}

      username: ${connectionInfo_username:aishwarya}
      password: ${connectionInfo_password:aishu@123}

      # Any other shard information follows...
    #-
      #shardId: shard2
      #shardLabel: 2
      #uri: ${connectionInfo_uri:bolt://localhost:7688
      #username: ${connectionInfo_username:neo4j}
      #password: ${connectionInfo_password:}

##################################################################################
# Uncomment the following section to use Cassandra as backend store              #
##################################################################################
cassandra:
    graphFactory: org.janusgraph.core.JanusGraphFactory
    backend: "cql"
    hostname: ${cassandra_host:localhost}
    keyspace: ${cassandra_keyspace:registry_db}
    db.cache.size: ${cassandra_db_cache_size:0.25}
    # wait time in milliseconds to clean the cache
    db.cache.clean.wait: ${cassandra_db_cache_clean_wait:60}
    index:
      storage.backend: ${cassandr_index_storage:elasticsearch}
      hostname: ${cassandra_index_hostname:localhost}

# File for framing the entity while reading
frame:
  file: ${frame_file:frame.json}

encryption:
  enabled: ${encryption_enabled:false}
  base: ${encryption_base:http://localhost:8013}
  uri: ${encryption_uri:http://localhost:8013/encrypt}
  batch:
    uri: ${encryption_batch_uri:http://localhost:8013/encrypt/obj}

decryption:
  uri: ${decryption_uri:http://localhost:8013/decrypt}
  batch:
    uri: ${decryption_batch_uri:http://localhost:8013/decrypt/obj}

signature:
  enabled: ${signature_enabled:false}
  healthCheckURL: ${sign_health_check_url:http://localhost:8013/}
  signURL: ${sign_url:http://localhost:8013/sign}
  verifyURL: ${verify_url:http://localhost:8013/verify}
  keysURL: ${keys_url:http://localhost:8013/keys/}
  domain: ${domain_url:https://w3id.org/security/v1/}
  schema:
    config:
      name: SignatureShape

# These properties are used to enable the audit log
# enabled : should be true to enable audit log and false to disable audit log
# store : specifies the storage option is FILE or DATABASE
# suffix : specifies the suffix given for schema. If audit schema name is Teacher_Audit.json, the suffix is Audit.
# suffixSeperator : specifies the separator used between entity name and suffix. If audit schema name is Teacher_Audit.json, the suffixSeperator is _.
audit:
  enabled: true
  frame:
    store: ${audit_frame_store:DATABASE
    suffix: ${audit_suffix:Audit}
    suffixSeparator: ${audit_suffixSeparator:_}

authentication:
  enabled: ${authentication_enabled:true}
  publicKey:  ${authentication_publickey:MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs50czuk9xI6wPq1zgumvvOG7z9muJ6zctQVGazm/s8/zynX/ZkwTB9nV8CNxg54zbxBlljgK0Er4H2fnhOpQycrfvH4dj5lCjVVA9uXEnHwmwZR0CozOXchxlcPG54UsLqcTY9vja+tBJ9dwb++LOcejWUp8AxYBjVOvDx3c1hfZO3fBR3nYmKlW5qmfEo4Y3JqRr/C+BloBrBLZ942oaml6JbTCyHIZhAQzDVlUK32EWeQ1Z02QY++kMPRooNDfudNHTuTfnctzLHeCtrHjKgJrmaQ7IaRk0eGhBPetTVRDqaY8Y6BkC6IW6lXhYtOlj3EXIwIgNO0gvnTzBGK65QIDAQAB}
  realm:  ${authentication_realm:NIITRegistry}
  url:  ${authentication_url:http://localhost:8443/auth/}

validation:
  enabled: ${validation_enabled:true}
  type: ${validation_type:json}

# Sets the service request and retry related configuration
service:
  connection:
    # Set the connection timeout for the underlying request configuration
    timeout: ${service_connection_timeout:5000}
    # Set the timeout in milliseconds used when requesting a connection from the connection manager using the underlying request Configuration
    request:
      timeout: ${service_connection_request_timeout:5000}
  # Set the socket read timeout for the underlying request configuration
  read:
    timeout: ${service_read_timeout:5000}
  retry:
    # The number of times an attempt must be made to reach to the service.
    maxAttempts: ${service_retry_maxAttempts:5}
    backoff:
      # The fixed time interval, in milliseconds, between each such attempt.
      delay: ${service_retry_backoff_delay:1000}

# Sets the task-executor configuration for threads
taskExecutor:
  index:
    # Specify the prefix to use for the names of newly created threads.
    threadPoolName: ${taskExecutor_index_threadPoolName:IndexThread-}
    # Set the ThreadPoolExecutor's core pool size.
    corePoolSize: ${taskExecutor_index_corePoolSize:2}
    # Set the ThreadPoolExecutor's maximum pool size.
    maxPoolSize: ${taskExecutor_index_maxPoolSize:2}
    # Set the capacity for the ThreadPoolExecutor's BlockingQueue.
    queueCapacity: ${taskExecutor_index_queueCapacity:3}

# Sets the task-executor configuration for threads while auditing
auditTaskExecutor:
  # Specify the prefix to use for the names of newly created threads.
  threadPoolName: ${auditTaskExecutor_threadPoolName:AuditThread-}
  # Set the ThreadPoolExecutor's core pool size.
  corePoolSize: ${auditTaskExecutor_corePoolSize:2}
  # Set the ThreadPoolExecutor's maximum pool size.
  maxPoolSize: ${auditTaskExecutor_maxPoolSize:2}
  # Set the capacity for the ThreadPoolExecutor's BlockingQueue.
  queueCapacity: ${auditTaskExecutor_queueCapacity:3}

# elastic-search configuration details
elastic:
  search:
    # elastic-search can be enable and disable through this flag
    enabled: ${elastic_search_enabled:true}
    # elastic-search connection info
    connection_url: ${elastic_search_connection_url:localhost:9200}

---
##################################################################
#                      TEST PROFILE                              #
##################################################################
spring:
  profiles: test
  output:
    ansi:
      enabled: ALWAYS
name: test-yaml
enviroment: test

perf:
  monitoring:
    enabled: false

registry:
  context:
    base: http://example.com/voc/teacher/1.0.0/
  system:
    base: http://example.com/voc/opensaber/

# This property is to be used for read request
read:
  # The read mechanism to use, values could be either NativeReadService or ElasticReadService
  providerName: io.opensaber.registry.service.NativeReadService

database:
  # This property is internal. Clients use this property to perform read/update operation.
  # NOTE: Once a uuidPropertyName is chosen it must not be changed, unless you're ready to let go the
  #       existing data in the database.
  uuidPropertyName: ${database_uuidPropertyName:osid}

  # Providers available are NEO4J, SQLG, TINKERGRAPH, CASSANDRA, ORIENTDB.
  # NOTE: Values given against 'shardId' must be unique
  provider: ${database_provider:NEO4J}

  # Choose "none" as the propertyName if you don't want any shards. Otherwise
  # implement IShardAdvisor interface in your own ways. An example, SerialNumShardAdvisor
  # has been provided for reference. If you'd like to use it, set value "serialNum" here.
  shardProperty: ${database_shardProperty:none}

  # Any other provider breaks the unit tests, needs a work-item
  provider: TINKERGRAPH

# File for framing the entity while reading
frame:
  file: frame.json

encryption:
  enabled: true
  base: https://dev.sunbirded.org/encryption/
  uri: https://dev.sunbirded.org/encryption/encrypt
  batch:
    uri: https://dev.sunbirded.org/encryption/encrypt/obj

decryption:
  uri: https://dev.sunbirded.org/encryption/decrypt
  batch:
    uri: https://dev.sunbirded.org/encryption/decrypt/obj

signature:
  enabled: ${signature_enabled:true}
  healthCheckURL: ${sign_health_check_url:https://dev.sunbirded.org/encryption/}
  signURL: ${sign_url:https://dev.sunbirded.org/encryption/sign}
  verifyURL: ${verify_url:https://dev.sunbirded.org/encryption/verify}
  keysURL: ${keys_url:https://dev.sunbirded.org/encryption/keys/}
  domain: ${domain_url:https://w3id.org/security/v1/}
  schema:
    config:
      name: SignatureShape

# These properties are used to enable the audit log
# enabled : should be true to enable audit log and false to disable audit log
# store : specifies the storage option is FILE or DATABASE
# suffix : specifies the suffix given for schema. If audit schema name is Teacher_Audit.json, the suffix is Audit.
# suffixSeperator : specifies the separator used between entity name and suffix. If audit schema name is Teacher_Audit.json, the suffixSeperator is _.

audit:
  enabled: ${audit_enabled:false}
  frame:
    store: ${audit_frame_store:DATABASE}
#   store: ${audit_frame_store:FILE}
    suffix: ${audit_suffix:Audit}
    suffixSeparator: ${audit_suffixSeparator:_}
   
authentication:
  enabled: true

keycloak:
  sso:
    publicKey:  ${sunbird_sso_publickey}
    realm:  ${sunbird_sso_realm}
    auth_server_url:  ${sunbird_sso_url}

validation:
  enabled: ${validation_enabled:true}
  type: ${validation_type:json}

# Sets the service request and retry related configuration
service:
  connection:
    # Set the connection timeout for the underlying request configuration
    timeout: ${service_connection_timeout:5000}
    # Set the timeout in milliseconds used when requesting a connection from the connection manager using the underlying request Configuration
    request:
      timeout: ${service_connection_request_timeout:5000}
  # Set the socket read timeout for the underlying request configuration
  read:
    timeout: ${service_read_timeout:5000}
  retry:
    # The number of times an attempt must be made to reach to the service.
    maxAttempts: ${service_retry_maxAttempts:5}
    backoff:
      # The fixed time interval, in milliseconds, between each such attempt.
      delay: ${service_retry_backoff_delay:1000}

# Sets the task-executor configuration for threads
taskExecutor:
  index:
    # Specify the prefix to use for the names of newly created threads.
    threadPoolName: ${taskExecutor_index_threadPoolName:IndexThread-}
    # Set the ThreadPoolExecutor's core pool size.
    corePoolSize: ${taskExecutor_index_corePoolSize:2}
    # Set the ThreadPoolExecutor's maximum pool size.
    maxPoolSize: ${taskExecutor_index_maxPoolSize:2}
    # Set the capacity for the ThreadPoolExecutor's BlockingQueue.
    queueCapacity: ${taskExecutor_index_queueCapacity:3}

# Sets the task-executor configuration for threads while auditing
auditTaskExecutor:
  # Specify the prefix to use for the names of newly created threads.
  threadPoolName: ${auditTaskExecutor_threadPoolName:AuditThread-}
  # Set the ThreadPoolExecutor's core pool size.
  corePoolSize: ${auditTaskExecutor_corePoolSize:2}
  # Set the ThreadPoolExecutor's maximum pool size.
  maxPoolSize: ${auditTaskExecutor_maxPoolSize:2}
  # Set the capacity for the ThreadPoolExecutor's BlockingQueue.
  queueCapacity: ${auditTaskExecutor_queueCapacity:3}

# elastic-search configuration details
elastic:
  search:
    # elastic-search can be enable and disable through this flag
    enabled: ${elastic_search_enabled:true}
    # elastic-search connection info
    connection_url: ${elastic_search_connection_url:localhost:9200}