spring:
  profiles.active: dev
---
##################################################################
#                      DEVELOPMENT PROFILE                       #
##################################################################
spring:
  profiles: dev
  output:
    ansi:
      enabled: ALWAYS
name: dev-yaml
enviroment: development

perf:
  monitoring:
    enabled: ${perf_monitoring_enabled:true}

persistence:
  enabled: ${persistence_enabled:true}

registry:
  context:
    base: ${registry_context_base:http://localhost:8080/}
  system:
    base: ${registry_system_base:http://localhost:8080/opensaber/}
  rootEntity:
        type: ${registry_rootentity_type:Teacher}

#This refers to the opensaber schema configuration JSON-LD file
config:
  schema:
    file: ${config_schema_file:schema-configuration.json}

database:
  #provider available are NEO4J, SQLG, TINKERGRAPH, CASSANDRA, ORIENTDB.
  #Note: Please avoid repeating the shardId.
  provider: ${database_provider:NEO4J}
  shardProperty: ${database_shardProperty:serialNum}
  connectionInfo:
    -
      shardId: shard1
      uri: ${connectionInfo_uri:bolt://localhost:7687}
      username: ${connectionInfo_username:neo4j}
      password: ${connectionInfo_password:}
    -
      shardId: shard2
      uri: ${connectionInfo_uri:bolt://localhost:7688}
      username: ${connectionInfo_username:neo4j}
      password: ${connectionInfo_password:}

##################################################################################
# Uncomment the following section to use Cassandra as backend store              #
##################################################################################
#  janus_cassandra:
#    graphFactory: org.janusgraph.core.JanusGraphFactory
#    storage.backend: "cassandrathrift"
#    storage.hostname: ${cassandra_host:localhost}
#    storage.keyspace: ${cassandra_keyspace:registry_db}
#    db.cache.size: ${cassandra_db_cache_size:0.25}
#    # wait time in milliseconds to clean the cache
#    db.cache.clean.wait: ${cassandra_db_cache_clean_wait:60}
#    index:
#      storage.backend: ${cassandr_index_storage:elasticsearch}
#      hostname: ${cassandra_index_hostname:localhost}
    
# File for framing the entity while reading
frame:
  file: ${frame_file:frame.json}

encryption:
  enabled: ${encryption_enabled:true}
  base: ${encryption_base:http://localhost:8013}
  uri: ${encryption_uri:http://localhost:8013/encrypt}
  batch:
    uri: ${encryption_batch_uri:http://localhost:8013/encrypt/obj}
  service:
    connection:
      timeout: ${encryption_service_connection_timeout:5000}
      request:
        timeout: ${encryption_service_connection_request_timeout:5000}
    read:
      timeout: ${encryption_service_read_timeout:5000}

decryption:
  uri: ${decryption_uri:http://localhost:8013/decrypt}
  batch:
    uri: ${decryption_batch_uri:http://localhost:8013/decrypt/obj}

signature:
  enabled: ${signature_enabled:true}
  healthCheckURL: ${sign_health_check_url:http://localhost:8013/}
  signURL: ${sign_url:http://localhost:8013/sign}
  verifyURL: ${verify_url:http://localhost:8013/verify}
  keysURL: ${keys_url:http://localhost:8013/keys/}
  domain: ${domain_url:https://w3id.org/security/v1/}
  schema:
    config:
      name: SignatureShape

audit:
  enabled: ${audit_enabled:false}
  frame:
    file: ${audit_frame_file:audit_frame.json}

authentication:
  enabled: ${authentication_enabled:true}

keycloak:
  sso:
    publicKey:  ${sunbird_sso_publickey}
    realm:  ${sunbird_sso_realm}
    auth_server_url:  ${sunbird_sso_url}

validation:
  enabled: ${validation_enabled:true}
  type: ${validation_type:json}
  create:
    file: ${validations_create_file:validations_create.shex}
  update:
    file: ${validations_update_file:validations_update.shex}

---
##################################################################
#                      TEST PROFILE                              #
##################################################################
spring:
  profiles: test
  output:
    ansi:
      enabled: ALWAYS
name: test-yaml
enviroment: test

perf:
  monitoring:
    enabled: false

persistence:
  enabled: ${persistence_enabled:true}

registry:
  context:
    base: http://example.com/voc/teacher/1.0.0/
  system:
    base: http://example.com/voc/opensaber/
  rootEntity:
            type: ${registry_rootentity_type:Teacher}

#This refers to the opensaber schema configuration JSON-LD file
config:
  schema:
    file: schema-configuration-school-test.jsonld

database:
  # Any other provider breaks the unit tests, needs a work-item
  provider: TINKERGRAPH

# File for framing the entity while reading
frame:
  file: frame.json

encryption:
  enabled: true
  base: https://dev.sunbirded.org/encryption/
  uri: https://dev.sunbirded.org/encryption/encrypt
  batch:
    uri: https://dev.sunbirded.org/encryption/encrypt/obj
  service:
    connection:
      timeout: ${encryption_service_connection_timeout:5000}
      request:
        timeout: ${encryption_service_connection_request_timeout:5000}
    read:
      timeout: ${encryption_service_read_timeout:5000}

decryption:
  uri: https://dev.sunbirded.org/encryption/decrypt
  batch:
    uri: https://dev.sunbirded.org/encryption/decrypt/obj

signature:
  enabled: ${signature_enabled:true}
  healthCheckURL: ${sign_health_check_url:https://dev.sunbirded.org/encryption/}
  signURL: ${sign_url:https://dev.sunbirded.org/encryption/sign}
  verifyURL: ${verify_url:https://dev.sunbirded.org/encryption/verify}
  keysURL: ${keys_url:https://dev.sunbirded.org/encryption/keys/}
  domain: ${domain_url:https://w3id.org/security/v1/}
  schema:
    config:
      name: SignatureShape

audit:
  enabled: false
  frame:
    file: audit_frame.json

authentication:
  enabled: true

keycloak:
  sso:
    publicKey:  ${sunbird_sso_publickey}
    realm:  ${sunbird_sso_realm}
    auth_server_url:  ${sunbird_sso_url}

validation:
  enabled: ${validation_enabled:true}
  type: ${validation_type:json}
  create:
    file: good1.shex
  update:
    file: good1.shex
