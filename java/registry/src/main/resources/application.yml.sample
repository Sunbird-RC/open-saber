spring:
  profiles.active: dev
---
##################################################################
#                      DEVELOPMENT PROFILE                       #
##################################################################
spring:
  profiles: dev
  output:
    ansi:
      enabled: ALWAYS
name: dev-yaml
enviroment: development

perf:
  monitoring:
    enabled: ${perf_monitoring_enabled:true}

persistence:
  enabled: ${persistence_enabled:true}

registry:
  context:
    base: ${registry_context_base:http://localhost:8080/}
  system:
    base: ${registry_system_base:http://localhost:8080/opensaber/}
  rootEntity:
        type: ${registry_rootentity_type:Teacher}
        
database:
  # This property is internal and not to be confused with the schema definition.
  # Clients use this property to perform read/update operation.
  # NOTE: Once a name is chosen it must not be changed, unless you're ready to let go the
  #       existing data in the database.
  uuidPropertyName: ${database_uuidPropertyName:osid}

  # Providers available are NEO4J, SQLG, CASSANDRA, ORIENTDB, TINKERGRAPH (in-memory).
  # NOTE: Values given against 'shardId' must be unique
  provider: ${database_provider:NEO4J}

  # Choose "none" as the propertyName if you don't want any shards. Otherwise
  # implement IShardAdvisor interface in your own ways. An example, SerialNumShardAdvisor
  # has been provided for reference. If you'd like to use it, set value "serialNum" here.
  # Note that "serialNum" must then be part of the payload.
  shardProperty: ${database_shardProperty:none}
  
  # This property is instruction to use the shard advisor.
  # Values could be DefaultShardAdvisor, SerialNumberShardAdvisor
  # If this property not provided, advisor is set to DefaultShardAdvisor
  shardAdvisor: SerialNumberShardAdvisor

  connectionInfo:
    -
      # shardId, shardlabel must be a unique identifier to each connection.
      shardId: shard1
      
      # shardLabel is used as prefix for a uuid. Could be any alpha numeric string
      # Example of a record identifier: 1-60f76147-0acd-4dff-b75a-2d811787d04d
      # Note '1' is the label used for record identifier
      # shardLabel is not stored in the database
      shardLabel: 1      

      # The format of the URI can be learnt from the following links -
      #     * 1. Graph database (Neo4J)
      #     ** https://github.com/SteelBridgeLabs/neo4j-gremlin-bolt
      #     ** Example : bolt://localhost:7687
      #     * 2. Relational databases (Postgresql, HSQLDB, H2, MariaDB, MySQL, MSSQLServer)
      #     ** http://sqlg.org/docs/2.0.0-SNAPSHOT/
      #     ** Example - Postgres - jdbc:postgresql://localhost:5432/yourdb
      uri: ${connectionInfo_uri:bolt://localhost:7687}

      username: ${connectionInfo_username:neo4j}
      password: ${connectionInfo_password:}

      # Any other shard information follows...
    #-
      #shardId: shard2
      #shardLabel: 2
      #uri: ${connectionInfo_uri:bolt://localhost:7688}
      #username: ${connectionInfo_username:neo4j}
      #password: ${connectionInfo_password:}

##################################################################################
# Uncomment the following section to use Cassandra as backend store              #
##################################################################################
#  janus_cassandra:
#    graphFactory: org.janusgraph.core.JanusGraphFactory
#    storage.backend: "cassandrathrift"
#    storage.hostname: ${cassandra_host:localhost}
#    storage.keyspace: ${cassandra_keyspace:registry_db}
#    db.cache.size: ${cassandra_db_cache_size:0.25}
#    # wait time in milliseconds to clean the cache
#    db.cache.clean.wait: ${cassandra_db_cache_clean_wait:60}
#    index:
#      storage.backend: ${cassandr_index_storage:elasticsearch}
#      hostname: ${cassandra_index_hostname:localhost}
    
# File for framing the entity while reading
frame:
  file: ${frame_file:frame.json}

encryption:
  enabled: ${encryption_enabled:true}
  base: ${encryption_base:http://localhost:8013}
  uri: ${encryption_uri:http://localhost:8013/encrypt}
  batch:
    uri: ${encryption_batch_uri:http://localhost:8013/encrypt/obj}
  service:
    connection:
      timeout: ${encryption_service_connection_timeout:5000}
      request:
        timeout: ${encryption_service_connection_request_timeout:5000}
    read:
      timeout: ${encryption_service_read_timeout:5000}

decryption:
  uri: ${decryption_uri:http://localhost:8013/decrypt}
  batch:
    uri: ${decryption_batch_uri:http://localhost:8013/decrypt/obj}

signature:
  enabled: ${signature_enabled:true}
  healthCheckURL: ${sign_health_check_url:http://localhost:8013/}
  signURL: ${sign_url:http://localhost:8013/sign}
  verifyURL: ${verify_url:http://localhost:8013/verify}
  keysURL: ${keys_url:http://localhost:8013/keys/}
  domain: ${domain_url:https://w3id.org/security/v1/}
  schema:
    config:
      name: SignatureShape

audit:
  enabled: ${audit_enabled:false}
  frame:
    file: ${audit_frame_file:audit_frame.json}

authentication:
  enabled: ${authentication_enabled:true}

keycloak:
  sso:
    publicKey:  ${sunbird_sso_publickey}
    realm:  ${sunbird_sso_realm}
    auth_server_url:  ${sunbird_sso_url}

validation:
  enabled: ${validation_enabled:true}
  type: ${validation_type:json}

---
##################################################################
#                      TEST PROFILE                              #
##################################################################
spring:
  profiles: test
  output:
    ansi:
      enabled: ALWAYS
name: test-yaml
enviroment: test

perf:
  monitoring:
    enabled: false

persistence:
  enabled: ${persistence_enabled:true}

registry:
  context:
    base: http://example.com/voc/teacher/1.0.0/
  system:
    base: http://example.com/voc/opensaber/
  rootEntity:
            type: ${registry_rootentity_type:Teacher}

database:
  # This property is internal and not to be confused with the schema definition.
  # Clients use this property to perform read/update operation.
  # NOTE: Once a name is chosen it must not be changed, unless you're ready to let go the
  #       existing data in the database.
  uuidPropertyName: ${database_uuidPropertyName:osid}

  # Providers available are NEO4J, SQLG, TINKERGRAPH, CASSANDRA, ORIENTDB.
  # NOTE: Values given against 'shardId' must be unique
  provider: ${database_provider:NEO4J}

  # Choose "none" as the propertyName if you don't want any shards. Otherwise
  # implement IShardAdvisor interface in your own ways. An example, SerialNumShardAdvisor
  # has been provided for reference. If you'd like to use it, set value "serialNum" here.
  shardProperty: ${database_shardProperty:none}

  # Any other provider breaks the unit tests, needs a work-item
  provider: TINKERGRAPH

# File for framing the entity while reading
frame:
  file: frame.json

encryption:
  enabled: true
  base: https://dev.sunbirded.org/encryption/
  uri: https://dev.sunbirded.org/encryption/encrypt
  batch:
    uri: https://dev.sunbirded.org/encryption/encrypt/obj
  service:
    connection:
      timeout: ${encryption_service_connection_timeout:5000}
      request:
        timeout: ${encryption_service_connection_request_timeout:5000}
    read:
      timeout: ${encryption_service_read_timeout:5000}

decryption:
  uri: https://dev.sunbirded.org/encryption/decrypt
  batch:
    uri: https://dev.sunbirded.org/encryption/decrypt/obj

signature:
  enabled: ${signature_enabled:true}
  healthCheckURL: ${sign_health_check_url:https://dev.sunbirded.org/encryption/}
  signURL: ${sign_url:https://dev.sunbirded.org/encryption/sign}
  verifyURL: ${verify_url:https://dev.sunbirded.org/encryption/verify}
  keysURL: ${keys_url:https://dev.sunbirded.org/encryption/keys/}
  domain: ${domain_url:https://w3id.org/security/v1/}
  schema:
    config:
      name: SignatureShape

audit:
  enabled: false
  frame:
    file: audit_frame.json

authentication:
  enabled: true

keycloak:
  sso:
    publicKey:  ${sunbird_sso_publickey}
    realm:  ${sunbird_sso_realm}
    auth_server_url:  ${sunbird_sso_url}

validation:
  enabled: ${validation_enabled:true}
  type: ${validation_type:json}
  